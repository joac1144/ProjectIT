// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectIT.Server.Database;

#nullable disable

namespace ProjectIT.Server.Migrations
{
    [DbContext(typeof(ProjectITDbContext))]
    [Migration("20230803013655_ProjectIT 62e99a9e-9f47-4a3d-81af-4f8e7021d19f")]
    partial class ProjectIT62e99a9e9f474a3d81af4f8e7021d19f
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectIT.Shared.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoSupervisorId")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasMaxLength(4400)
                        .HasColumnType("character varying(4400)");

                    b.Property<string>("Ects")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Programmes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CoSupervisorId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionHtml")
                        .IsRequired()
                        .HasMaxLength(4400)
                        .HasColumnType("character varying(4400)");

                    b.Property<string>("Ects")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Programmes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(4);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.Property<string>("Programme")
                        .HasColumnType("text")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Supervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(4);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(5);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("Supervisor", (string)null);
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("ProjectStudent", b =>
                {
                    b.Property<int>("AppliedProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("AppliedProjectsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ProjectStudent");
                });

            modelBuilder.Entity("ProjectTopic", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TopicsId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("ProjectTopic");
                });

            modelBuilder.Entity("RequestStudent", b =>
                {
                    b.Property<int>("ExtraMembersId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.HasKey("ExtraMembersId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestStudent");
                });

            modelBuilder.Entity("RequestSupervisor", b =>
                {
                    b.Property<int>("ReceivedRequestsId")
                        .HasColumnType("integer");

                    b.Property<int>("SupervisorsId")
                        .HasColumnType("integer");

                    b.HasKey("ReceivedRequestsId", "SupervisorsId");

                    b.HasIndex("SupervisorsId");

                    b.ToTable("RequestSupervisor");
                });

            modelBuilder.Entity("RequestTopic", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<int>("TopicsId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("RequestTopic");
                });

            modelBuilder.Entity("SupervisorTopic", b =>
                {
                    b.Property<int>("SupervisorId")
                        .HasColumnType("integer");

                    b.Property<int>("TopicsId")
                        .HasColumnType("integer");

                    b.HasKey("SupervisorId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("SupervisorTopic");
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Project", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Supervisor", "CoSupervisor")
                        .WithMany()
                        .HasForeignKey("CoSupervisorId");

                    b.HasOne("ProjectIT.Shared.Models.Supervisor", "Supervisor")
                        .WithMany("Projects")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoSupervisor");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Request", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Student", "Student")
                        .WithMany("Requests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ProjectStudent", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("AppliedProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIT.Shared.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTopic", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIT.Shared.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestStudent", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("ExtraMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIT.Shared.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestSupervisor", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("ReceivedRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIT.Shared.Models.Supervisor", null)
                        .WithMany()
                        .HasForeignKey("SupervisorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestTopic", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIT.Shared.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupervisorTopic", b =>
                {
                    b.HasOne("ProjectIT.Shared.Models.Supervisor", null)
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectIT.Shared.Models.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Student", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("ProjectIT.Shared.Models.Supervisor", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
