@attribute [Route(PageUrls.ProjectDetails)]
@using ProjectIT.Client.Components.Panel
@using ProjectIT.Client.Components.Filter
@using ProjectIT.Client.Components.Modal
@using ProjectIT.Client.Components.Search
@using ProjectIT.Client.Components.Tag
@using ProjectIT.Client.Constants;
@using ProjectIT.Client.Http;
@using ProjectIT.Client.Pages
@using ProjectIT.Shared.Enums
@using ProjectIT.Shared.Models
@using ProjectIT.Client.Components.DetailsView
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<EnumsResource> EnumsLocalizer
@inject AnonymousClient anonymousClient

<PageTitle> Project Details </PageTitle>
<br>

@if (project == null)
{
    <div class="d-flex align-items-center justify-content-center h-100">
        <div class="spinner-border spinner" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="d-flex flex-row justify-content-center project-details-view">
        <div class="d-flex flex-column">
            <div>
                <Panel Title="Project Info" Width="@panelWidth">
                    <div class="d-flex flex-column py-2">
                        <p class="fw-bold m-0">Programmes:</p>
                        <div class="d-flex flex-wrap programmes">
                            @for (int i = 0; i < project.Programmes.Count(); i++)
                            {
                                <p1 class="fw-normal"> @project.Programmes.ElementAt(i).ToString() </p1>
                                if (i != project.Programmes.Count() - 1)
                                {
                                    <span class="border-start border-2 border-dark border-opacity-10"></span>
                                }
                            }
                        </div>
                        <p class="fw-bold m-0 mt-3">ECTS Points:</p>
                        <p1 class="fw-normal"> @project.Ects.GetTranslatedString(EnumsLocalizer) </p1>

                        <p class="fw-bold m-0 mt-3">Semester:</p>
                        <p1 class="fw-normal"> @project.Semester?.Season @project.Semester?.Year </p1>

                        <p class="fw-bold m-0 mt-3">Languages:</p>
                        @foreach (Language language in project.Languages)
                        {
                            <p1 class="fw-normal"> @language </p1>
                        }
                    </div>
                </Panel>
            </div>
            @if (project.Topics is not null && project.Topics.Any())
            {
                <div class="my-2">
                    <Panel Title="Topics" Width="@panelWidth">
                        <TagsDisplay Tags="project.Topics?.Select(topic => new FilterTag { Tag = topic.Name, Selected = true }).ToList()" />
                    </Panel>
                </div>
            }
            else
            {
                <div class="my-2">
                    <Panel Title="Topics" Width="@panelWidth">
                        <div class="d-flex flex-column align-items-center">
                            <span class="my-3 fs-7 fw-bold text-black-50">No topics</span>
                        </div>
                    </Panel>
                </div>
            }
        </div>
        <DetailsView Title="@project.Title" Description="@project.DescriptionHtml" />
        <div class="d-flex flex-column">
            <div>
                <Panel Title="Supervisor" Width="@panelWidth">
                    <p class="fw-normal pt-2">
                        <h6 class="fw-bold"> Info: </h6>
                        <div class="lh-lg">
                            <a href=@($"{PageUrls.Supervisors}/{project.Supervisor.Id}") class="text-decoration-none">
                                @project.Supervisor.FullName <br>
                            </a>
                            @project.Supervisor.Email <br>
                            @project.Supervisor.Profession.GetTranslatedString(EnumsLocalizer) <br>
                            <span class=@($"border rounded rounded-3 px-2 fs-8 text-white d-inline-block {statusSupervisor} ")>@project.Supervisor.Status.GetTranslatedString(EnumsLocalizer)</span>
                        </div>
                    </p>
                </Panel>
            </div>
            @if (project.CoSupervisor != null)
            {
                <div class="mt-2">
                    <Panel Title="Co-supervisor" Width="@panelWidth">
                        <p class="fw-normal pt-2">
                            <h6 class="fw-bold"> Info: </h6>
                            <div class="lh-lg">
                                <a href=@($"{PageUrls.Supervisors}/{project.CoSupervisor?.Id}") class="text-decoration-none">
                                    @project.CoSupervisor?.FullName <br>
                                </a>
                                @project.CoSupervisor?.Email <br>
                                @project.CoSupervisor?.Profession.GetTranslatedString(EnumsLocalizer) <br>
                                <span class=@($"border rounded rounded-3 px-2 fs-8 text-white d-inline-block {statusCoSupervisor} ")>@project.CoSupervisor?.Status.GetTranslatedString(EnumsLocalizer)</span>
                            </div>
                        </p>
                    </Panel>
                </div>
            }
            <AuthorizeView>
                <Authorized>
                    @if (context.User.IsInRole(AppRoles.Student))
                    {
                        if (appliedStudentGroup is not null)
                        {
                            var sortedList = appliedStudentGroup.Students.OrderBy(s => s.FullName).ToList();
                            <Panel Title="Applied group" Width="@panelWidth">
                                @for (int i = 0; i < sortedList.Count(); i++)
                                {
                                    var student = sortedList.ElementAt(i);
                                    <p class="my-0">@student.FullName</p>
                                    <p class="my-1">@student.Email</p>
                                    if (i < sortedList.Count() - 1)
                                    {
                                        <hr class="my-2" />
                                    }
                                }
                                <button class="btn btn-danger fw-bold px-2 my-2 mt-4 w-100">Cancel</button>
                            </Panel>
                        }
                        else
                        {
                            <button @onclick="(() => modal?.OpenModal())" type="button" class="btn btn-success fw-bold mt-2 mb-4" data-bs-toggle="modal" data-bs-target="#groupMembersModal">
                                Apply
                            </button>
                        }
                    }
                    @if (context.User.IsInRole(AppRoles.Supervisor))
                    {
                        if (context.User.Identity!.Name == project.Supervisor.FullName)
                        {
                            <button @onclick="(() => EditProject(project.Id))" type="button" class="btn fw-bold edit-btn-orange mt-2 mb-4"> 
                                Edit
                            </button>
                        }
                    }
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}
<Modal @ref="modal" T="StudentGroup" Identifier="groupMembers" Title="Choose group members" CloseButtonText="Cancel">
    <Body>
        <p class="mb-3">Please choose who, if any, you will be working with.</p>
        @for (int i = 0; i < groupMembers && i < 5; i++)
        {
            <div class="d-flex flex-row mb-2">
                <form class="d-flex align-items-center gap-3" onsubmit="event.preventDefault()">
                    <SearchField PlaceholderText="Add member mail..." ShowSearchIcon="false" Width="14.5rem" OnInputValueChanged="(newVal) => memberMail = newVal" />
                    <button type="reset" value="reset" class="d-flex flex-row align-items-center btn btn-success" @onclick=OnAddNewMemberFromSearchClicked>
                        <p class="m-0 fs-8">Add member</p>
                    </button>
                </form>
            </div>
            <div class="d-flex flex-start flex-wrap flex-column">
                @foreach (var member in extraMembers)
                {
                    <div class="d-flex justify-content-between">
                        <span>@member?.FirstName @member?.LastName</span>
                        <button class="bg-transparent border-0 add-width" @onclick="() => OnSelectedMemberClicked(member!)">
                            <img class="w-100 h-70" src="images/baseline_clear_24.png" alt="Clear">
                        </button>
                    </div>
                    if (member != extraMembers.Last())
                    {
                        <hr class="my-2" />
                    }
                }
            </div>
        }
    </Body>
    <Buttons>
        <button type="button" class="btn btn-dark" data-bs-dismiss="modal" @onclick="async () => await ApplyProject()">Confirm and apply</button>
    </Buttons>
</Modal>